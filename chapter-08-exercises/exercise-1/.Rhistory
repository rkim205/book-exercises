# Exercise 1: creating and accessing lists
# Create a vector `my_breakfast` of everything you ate for breakfast
my_breakfast <- c("eggs", "bacon")
# Create a vector `my_lunch` of everything you ate (or will eat) for lunch
my_lunch <- c("rice", "pork belly", "spinach")
# Create a list `meals` that has contains your breakfast and lunch
meals <- list(my_breakfast, my_lunch)
# Add a "dinner" element to your `meals` list that has what you plan to eat
# for dinner
meals[[4]] <- dinner
# Use dollar notation to extract your `dinner` element from your list
# and save it in a vector called 'dinner'
dinner <- c(meals$dinner)
# Add a "dinner" element to your `meals` list that has what you plan to eat
# for dinner
meals[[4]] <- dinner
# Exercise 1: creating and accessing lists
# Create a vector `my_breakfast` of everything you ate for breakfast
my_breakfast <- c("eggs", "bacon")
# Create a vector `my_lunch` of everything you ate (or will eat) for lunch
my_lunch <- c("rice", "pork belly", "spinach")
# Create a list `meals` that has contains your breakfast and lunch
meals <- list(my_breakfast, my_lunch)
# Add a "dinner" element to your `meals` list that has what you plan to eat
# for dinner
meals[[4]] <- dinner
# Use dollar notation to extract your `dinner` element from your list
# and save it in a vector called 'dinner'
dinner <- c(meals$dinner)
# Use double-bracket notation to extract your `lunch` element from your list
# and save it in your list as the element at index 5 (no reason beyond practice)
list[[5]] <- meals[[2]]
# Use double-bracket notation to extract your `lunch` element from your list
# and save it in your list as the element at index 5 (no reason beyond practice)
meals[[5]] <- meals[[2]]
meals
# Use dollar notation to extract your `dinner` element from your list
# and save it in a vector called 'dinner'
dinner <- c(meals$dinner)
# Add a "dinner" element to your `meals` list that has what you plan to eat
# for dinner
meals[[4]] <- dinner
meals
# Add a "dinner" element to your `meals` list that has what you plan to eat
# for dinner
meals[[4]] <- dinner = c("ramen")
# Add a "dinner" element to your `meals` list that has what you plan to eat
# for dinner
meals[[4]] <- dinner = c("ramen")
# Add a "dinner" element to your `meals` list that has what you plan to eat
# for dinner
meals[[4]] <- (dinner = c("ramen"))
# Use dollar notation to extract your `dinner` element from your list
# and save it in a vector called 'dinner'
dinner <- c(meals$dinner)
# Use double-bracket notation to extract your `lunch` element from your list
# and save it in your list as the element at index 5 (no reason beyond practice)
meals[[5]] <- meals[[2]]
meals
# Add a "dinner" element to your `meals` list that has what you plan to eat
# for dinner
meals[[3]] <- (dinner = c("ramen"))
# Exercise 1: creating and accessing lists
# Create a vector `my_breakfast` of everything you ate for breakfast
my_breakfast <- c("eggs", "bacon")
# Create a vector `my_lunch` of everything you ate (or will eat) for lunch
my_lunch <- c("rice", "pork belly", "spinach")
# Create a list `meals` that has contains your breakfast and lunch
meals <- list(my_breakfast, my_lunch)
# Add a "dinner" element to your `meals` list that has what you plan to eat
# for dinner
meals[[3]] <- (dinner = c("ramen"))
# Use dollar notation to extract your `dinner` element from your list
# and save it in a vector called 'dinner'
dinner <- c(meals$dinner)
# Use double-bracket notation to extract your `lunch` element from your list
# and save it in your list as the element at index 5 (no reason beyond practice)
meals[[5]] <- meals[[2]]
meals
# Use single-bracket notation to extract your breakfast and lunch from your list
# and save them to a list called `early_meals`
# Use single-bracket notation to extract your breakfast and lunch from your list
# and save them to a list called `early_meals`
early_meals <- meals[1:2]
early_meals
# Create a list that has the number of items you ate for each meal
# Hint: use the `lappy()` function to apply the `length()` function to each item
num_items <- lappy(meals)
?lappy
?lapply
# Create a list that has the number of items you ate for each meal
# Hint: use the `lappy()` function to apply the `length()` function to each item
num_items <- lapply(meals)
# Create a list that has the number of items you ate for each meal
# Hint: use the `lappy()` function to apply the `length()` function to each item
num_items <- lapply(meals, length)
meal.append(pizza)
?append
add_pizza <- function(pizza) {
append(meal, pizza)
return(meal)
}
# Create a vector `better_meals` that is all your meals, but with pizza!
better_meals <- add_pizza(meals)
add_pizza <- function(meal) {
append(meal, "pizza")
return(meal)
}
# Create a vector `better_meals` that is all your meals, but with pizza!
better_meals <- add_pizza(meals)
add_pizza <- function(meal) {
meal[length(meal) + 1] <- "pizza"
return(meal)
}
# Create a vector `better_meals` that is all your meals, but with pizza!
better_meals <- add_pizza(meals)
# Add a column to the `salaries` data frame that represents each person's
# salary in 2018 (e.g., with the salary adjustment added in).
col_names(salaries) <- c(salaries_2017 + adjustments)
# Exercise 2: working with data frames
# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100")
# Hint: use the `paste()` function and vector recycling to add a number to the word
# "Employee"
employees <- paste("Employee", 1:100)
print(employees)
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
salaries_2017 <- runif(100, 40000, 50000)
# Create a vector of 100 annual salary adjustments between -5000 and 10000.
# (A negative number represents a salary decrease due to corporate greed)
# Again use the `runif()` function to pick 100 random numbers in that range.
adjustments <- runif(100, -5000, 10000)
# Create a data frame `salaries` by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frame(employees, salaries_2017, adjustments)
# Add a column to the `salaries` data frame that represents each person's
# salary in 2018 (e.g., with the salary adjustment added in).
col_names(salaries) <- c(salaries_2017 + adjustments)
# Add a column to the `salaries` data frame that represents each person's
# salary in 2018 (e.g., with the salary adjustment added in).
colnames(salaries) <- c(salaries_2017 + adjustments)
# Add a column to the `salaries` data frame that represents each person's
# salary in 2018 (e.g., with the salary adjustment added in).
salaries$salaries_2018 <- c(salaries_2017 + adjustments)
# Add a column to the `salaries` data frame that has a value of `TRUE` if the
# person got a raise (their salary went up)
salaries$increased_salaries <- c(salaries_2018 > salaries_2017)
# Add a column to the `salaries` data frame that represents each person's
# salary in 2018 (e.g., with the salary adjustment added in).
salaries_2018 <- c(salaries_2017 + adjustments)
source('~/Desktop/INFO201/book-exercises/chapter-10-exercises/exercise-2/exercise.R', echo=TRUE)
salaries$salaries_2018 <- c(salaries_2017 + adjustments)
# Add a column to the `salaries` data frame that has a value of `TRUE` if the
# person got a raise (their salary went up)
salaries$increased_salaries <- c(salaries_2018 > salaries_2017)
# What was the 2018 salary of Employee 57
salaries_2018[5]
# How many employees got a raise?
length(increased_salaries[increased_salaries == TRUE])
# Add a column to the `salaries` data frame that has a value of `TRUE` if the
# person got a raise (their salary went up)
increased_salaries <- c(salaries_2018 > salaries_2017)
salaries$increased_salaries <- increased_salaries
salaries$salaries_2018 <- salaries_2018
# How many employees got a raise?
length(increased_salaries[increased_salaries == TRUE])
# What was the dollar value of the highest raise?
max(salaries_2018 - salaries_2017)
# What was the "name" of the employee who received the highest raise?
names(salaries)[max(salaries_2018 - salaries_2017)]
?names
# What was the "name" of the employee who received the highest raise?
names(adjustments)[adjustments == max(salaries_2018 - salaries_2017)]
# What was the "name" of the employee who received the highest raise?
names(salaries$adjustments)[adjustments == max(salaries_2018 - salaries_2017)]
# What was the "name" of the employee who received the highest raise?
names(salaries$adjustments)
# What was the largest decrease in salaries between the two years?
min(salaries_2018 - salaries_2017)
# What was the "name" of the employee who received the highest raise?
salaries$adjustments
# What was the "name" of the employee who received the highest raise?
salaries$adjustments == max(salaries_2018 - salaries_2017)
# What was the "name" of the employee who received the highest raise?
names(salaries$adjustments == max(salaries_2018 - salaries_2017))
# What was the "name" of the employee who received the highest raise?
names(salaries)[salaries$adjustments == max(salaries_2018 - salaries_2017)]
# What was the "name" of the employee who received the highest raise?
names(employees)[salaries$adjustments == max(salaries_2018 - salaries_2017)]
# What was the "name" of the employee who received the highest raise?
salaries$names == max(salaries_2018 - salaries_2017)
# What was the "name" of the employee who received the highest raise?
salaries$adjustments == max(salaries_2018 - salaries_2017)
# What was the "name" of the employee who received the highest raise?
employees[salaries$adjustments == max(salaries_2018 - salaries_2017)]
# What was the name of the employee who recieved largest decrease in salary?
employees[salaries$adjustments == min(salaries_2018 - salaries_2017)]
# What was the average salary change?
mean(adjustments)
# For people who did not get a raise, how much money did they lose on average?
mean(adjustments < 0)
# How many employees got a raise?
length(increased_salaries[increased_salaries == TRUE])
# Write a .csv file of your salary data to your working directory
salaries <- read.csv('salaries.csv')
# Write a .csv file of your salary data to your working directory
write.csv(salaries, file = 'data/salaries.csv')
# Write a .csv file of your salary data to your working directory
write.csv(salaries, 'C:\\Users\\ryanlionkim\\Desktop\\INFO201\\book-exercises\\chapter-10-exercises\\exercise-2\\salaries.csv', row.names = TRUE)
# Write a .csv file of your salary data to your working directory
write.csv(salaries, 'C:\\Users\\ryanlionkim\\Desktop\\INFO201\\book-exercises\\chapter-10-exercises\\exercise-2\\salaries.csv', row.names = TRUE)
# Write a .csv file of your salary data to your working directory
write.csv(salaries, "C:\\Users\\ryanlionkim\\Desktop\\INFO201\\book-exercises\\chapter-10-exercises\\exercise-2\\salaries.csv", row.names = TRUE)
# Write a .csv file of your salary data to your working directory
write.csv(salaries, "salaries.csv", row.names = TRUE)
