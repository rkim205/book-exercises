# Install the `"nycflights13"` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
#install.packages("nycflights13")  # should be done already
library("nycflights13")
library("dplyr")
View(nycflights13)
View("nycflights13")
# Install the `"nycflights13"` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
install.packages("nycflights13")  # should be done already
install.packages("nycflights13")
nycflights13
nycflights13
View(nycflights13)
View("nycflights13")
nycflights13
flights
dim(flights)
# Install the `"nycflights13"` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
#install.packages("nycflights13")  # should be done already
library(nycflights13)
nycflights13
View(nycflights13)
flights
View(flights)
# What was the average departure delay in each month?
# Save this as a data frame `dep_delay_by_month`
# Hint: you'll have to perform a grouping operation then summarizing your data
dep_delay_by_month <- flights %>% group_by(month) %>% summarize(avg_dep_delay = mean(dep_delay))
library("dplyr")
# What was the average departure delay in each month?
# Save this as a data frame `dep_delay_by_month`
# Hint: you'll have to perform a grouping operation then summarizing your data
dep_delay_by_month <- flights %>% group_by(month) %>% summarize(avg_dep_delay = mean(dep_delay))
# Which month had the greatest average departure delay?
greatest_dep_delay <- dep_delay_by_month %>% filter(avg_dep_delay == max(avg_dep_delay))
greatest_dep_delay
# Which month had the greatest average departure delay?
greatest_dep_delay <- flights %>% group_by(month) %>% summarize(avg_dep_delay = mean(dep_delay)) %>% filter(avg_dep_delay == max(avg_dep_delay))
greatest_dep_delay
# Which month had the greatest average departure delay?
greatest_dep_delay <- flights %>% group_by(month) %>% summarize(greatest = max(mean(dep_delay))) %>% select(month)
View(greatest_dep_delay)
greatest_dep_delay
# Which month had the greatest average departure delay?
greatest_dep_delay <- flights %>% group_by(month) %>% summarize(avg_dep_delay = mean(dep_delay)) %>% filter(avg_dep_delay == max(avg_dep_delay)) %>% select(month)
greatest_dep_delay
dep_delay_by_month
# What was the average departure delay in each month?
# Save this as a data frame `dep_delay_by_month`
# Hint: you'll have to perform a grouping operation then summarizing your data
dep_delay_by_month <- flights %>% group_by(month) %>% summarize(avg_dep_delay = mean(dep_delay))
dep_delay_by_month
# What was the average departure delay in each month?
# Save this as a data frame `dep_delay_by_month`
# Hint: you'll have to perform a grouping operation then summarizing your data
dep_delay_by_month <- flights %>% group_by(month) %>% summarize(avg_dep_delay = mean(dep_delay, na.rm = TRUE))
dep_delay_by_month
greatest_dep_delay <- flights %>% group_by(month) %>% summarize(avg_dep_delay = mean(dep_delay, na.rm = TRUE)) %>% filter(avg_dep_delay == max(avg_dep_delay)) %>% select(month)
greatest_dep_delay
# Which month had the greatest average departure delay?
greatest_dep_delay <- flights %>% group_by(month) %>% summarize(avg_dep_delay = mean(dep_delay, na.rm = TRUE)) %>% filter(avg_dep_delay == max(avg_dep_delay)) %>% select(month, avg_dep_delay)
# If your above data frame contains just two columns (e.g., "month", and "delay"
# in that order), you can create a scatterplot by passing that data frame to the
# `plot()` function
plot(greatest_dep_delay)
# To which destinations were the average arrival delays the highest?
# Hint: you'll have to perform a grouping operation then summarize your data
# You can use the `head()` function to view just the first few rows
arrival_dep_dest <- flights %>% group_by(dest) %>% summarize(avg_arr_delay = mean(arr_delay, na.rm = TRUE))
arrival_dep_dest
# To which destinations were the average arrival delays the highest?
# Hint: you'll have to perform a grouping operation then summarize your data
# You can use the `head()` function to view just the first few rows
arrival_dep_dest <- flights %>% group_by(dest) %>% summarize(avg_arr_delay = mean(arr_delay, na.rm = TRUE)) %>% arrange(avg_arr_delay)
arrival_dep_dest
# To which destinations were the average arrival delays the highest?
# Hint: you'll have to perform a grouping operation then summarize your data
# You can use the `head()` function to view just the first few rows
arrival_dep_dest <- flights %>% group_by(dest) %>% summarize(avg_arr_delay = mean(arr_delay, na.rm = TRUE)) %>% arrange(desc(avg_arr_delay))
head(arrival_dep_dest)
# You can look up these airports in the `airports` data frame!
airports
# Which city was flown to with the highest average speed?
highest_avg_speed_city <- flights %>% group_by(dest) %>% summarize(speed = distance/air_time)
# Which city was flown to with the highest average speed?
highest_avg_speed_city <- flights %>% group_by(dest) %>% mutate(speed = distance/air_time)
highest_avg_speed_city <- flights %>% group_by(dest) %>% mutate(speed = distance/air_time) %>% arrange(speed)
head(highest_avg_speed_city)
# Which city was flown to with the highest average speed?
highest_avg_speed_city <- flights %>% group_by(dest) %>% mutate(speed = distance/air_time) %>% arrange(speed) %>% select(dest, speed)
head(highest_avg_speed_city)
highest_avg_speed_city <- flights %>% group_by(dest) %>% mutate(speed = distance/air_time) %>% arrange(desc(speed)) %>% select(dest, speed)
head(highest_avg_speed_city)
# Install the `"nycflights13"` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
#install.packages("nycflights13")  # should be done already
library("nycflights13")
library("dplyr")
# Create a dataframe of the average arrival delays for each _destination_, then
# use `left_join()` to join on the "airports" dataframe, which has the airport
# information
# Which airport had the largest average arrival delay?
avg_arr_delays <- flights %>% group_by(dest) %>% summarize(avg_delay = mean(arr_delay, na.rm = TRUE)) %>% left_join(airports)
?left_join
# Create a dataframe of the average arrival delays for each _destination_, then
# use `left_join()` to join on the "airports" dataframe, which has the airport
# information
# Which airport had the largest average arrival delay?
avg_arr_delays <- flights %>% group_by(dest) %>% summarize(avg_delay = mean(arr_delay, na.rm = TRUE)) %>% left_join(airports, by = NULL)
View(airports)
# Create a dataframe of the average arrival delays for each _destination_, then
# use `left_join()` to join on the "airports" dataframe, which has the airport
# information
# Which airport had the largest average arrival delay?
avg_arr_delays <- flights %>% group_by(dest) %>% summarize(avg_delay = mean(arr_delay, na.rm = TRUE)) %>% left_join(airports, by = name)
# Create a dataframe of the average arrival delays for each _destination_, then
# use `left_join()` to join on the "airports" dataframe, which has the airport
# information
# Which airport had the largest average arrival delay?
avg_arr_delays <- flights %>% group_by(dest) %>% summarize(avg_delay = mean(arr_delay, na.rm = TRUE)) %>% left_join(airports, by = "name")
left_join(avg_arr_delays, airports)
# Create a dataframe of the average arrival delays for each _destination_, then
# use `left_join()` to join on the "airports" dataframe, which has the airport
# information
# Which airport had the largest average arrival delay?
avg_arr_delays <- flights %>% group_by(dest) %>% summarize(avg_delay = mean(arr_delay, na.rm = TRUE))
left_join(avg_arr_delays, airports)
left_join(avg_arr_delays, airports, by = NULL)
left_join(avg_arr_delays, airports, by = "name")
left_join(avg_arr_delays, airports, by = "dest")
left_join(avg_arr_delays, airports)
left_join(airports, avg_arr_delays)
left_join(avg_arr_delays, airports, by = c("avg_delay" = "name"))
left_join(avg_arr_delays, airports, by = "name")
avg_arr_delays <- flights %>% group_by(dest) %>% summarize(avg_delay = mean(arr_delay, na.rm = TRUE))
left_join(avg_arr_delays, airports, by = "name")
# Create a dataframe of the average arrival delays for each _destination_, then
# use `left_join()` to join on the "airports" dataframe, which has the airport
# information
# Which airport had the largest average arrival delay?
avg_arr_delays <- flights %>% group_by(dest) %>% summarize(avg_delay = mean(arr_delay, na.rm = TRUE))
avg_arr_delays
airport_delays <- left_join(avg_arr_delays, airports)
avg_arr_delays
airport_delays <- left_join(avg_arr_delays, airports, by = c("dst" = "dest"))
airport_delays <- left_join(airports, avg_arr_delays)
# Create a dataframe of the average arrival delays for each _destination_, then
# use `left_join()` to join on the "airports" dataframe, which has the airport
# information
# Which airport had the largest average arrival delay?
avg_arr_delays <- flights %>% group_by(dest) %>% summarize(avg_delay = mean(arr_delay, na.rm = TRUE)) %>% left_join(airports)
airport_delays <- left_join(airports, avg_arr_delays, by = "dest")
airport_delays <- left_join(airports, avg_arr_delays, by = "name")
avg_arr_delays
#View(airports)
View(airlines)
airline_avg_arr_delay <- flights %>% group_by(airlines) %>% summarize(avg_arr_delay = mean(arr_delay, na.rm = TRUE)) %>% left_join(airlines)
airlines
airline_avg_arr_delay <- flights %>% group_by(carrier) %>% summarize(avg_arr_delay = mean(arr_delay, na.rm = TRUE)) %>% left_join(airlines)
airline_avg_arr_delay
smallest_avg_arr_delay <- airline_avg_arr_delay %>% filter(avg_arr_delay == min(avg_arr_delay))
# Load the httr and jsonlite libraries for accessing data
# You can also load `dplyr` if you wish to use it
library(httr)
install.packages("httr")
library("httr")
install.packages("jsonlite")
library("jsonlite")
library("httr")
# Create a variable base_uri that stores the base URI (as a string) for the
# Github API (https://api.github.com)
base_uri <- "hyyps://api.github.com"
# Under the "Repositories" category of the API documentation, find the endpoint
# that will list _repos in an organization_. Then create a variable named
# `org_resource` that stores the endpoint for the `programming-for-data-science`
# organization repos (this is the _path_ to the resource of interest).
org_resource <- paste0("/programming-for-data-science/", "info201", "/repos")
# Send a GET request to this endpoint (the `base_uri` followed by the
# `org_resource` path). Print the response to show that your request worked.
# (The listed URI will also allow you to inspect the JSON in the browser easily).
GET(base_uri, org_resource)
# Send a GET request to this endpoint (the `base_uri` followed by the
# `org_resource` path). Print the response to show that your request worked.
# (The listed URI will also allow you to inspect the JSON in the browser easily).
GET(paste0(base_uri, org_resource))
# Create a variable base_uri that stores the base URI (as a string) for the
# Github API (https://api.github.com)
base_uri <- "https://api.github.com"
# Under the "Repositories" category of the API documentation, find the endpoint
# that will list _repos in an organization_. Then create a variable named
# `org_resource` that stores the endpoint for the `programming-for-data-science`
# organization repos (this is the _path_ to the resource of interest).
org_resource <- paste0("/programming-for-data-science/", "info201", "/repos")
# Send a GET request to this endpoint (the `base_uri` followed by the
# `org_resource` path). Print the response to show that your request worked.
# (The listed URI will also allow you to inspect the JSON in the browser easily).
GET(paste0(base_uri, org_resource))
print()
# Send a GET request to this endpoint (the `base_uri` followed by the
# `org_resource` path). Print the response to show that your request worked.
# (The listed URI will also allow you to inspect the JSON in the browser easily).
print(GET(paste0(base_uri, org_resource)))
# Send a GET request to this endpoint (the `base_uri` followed by the
# `org_resource` path). Print the response to show that your request worked.
# (The listed URI will also allow you to inspect the JSON in the browser easily).
response <- GET(paste0(base_uri, org_resource))
print(response)
# Extract the content of the response using the `content()` function, saving it
# in a variable.
body <- content(response, "text")
# Convert the content variable from a JSON string into a data frame.
df <- fromJSON(body)
# How many (public) repositories does the organization have?
df
# How many (public) repositories does the organization have?
nrow(df)
# Search queries require a query parameter (for what to search for). Create a
# `query_params` list variable that specifies an appropriate key and value for
# the search term (you can search for anything you want!)
query_params <- list(key, value)
# Search queries require a query parameter (for what to search for). Create a
# `query_params` list variable that specifies an appropriate key and value for
# the search term (you can search for anything you want!)
query_params <- list("key", "value")
# Extract the content of the response and convert it from a JSON string into a
# data frame.
content(body)
