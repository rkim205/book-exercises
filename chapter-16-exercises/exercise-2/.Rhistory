# Use `source()` to load your API key variable from the `apikey.R` file you made.
# Make sure you've set your working directory!
source("apikey.R")
setwd("~/Desktop/INFO201")
# Use `source()` to load your API key variable from the `apikey.R` file you made.
# Make sure you've set your working directory!
source("apikey.R")
resource <- "reviews/search.json"
# Construct an HTTP request to search for reviews for the given movie.
# The base URI is `https://api.nytimes.com/svc/movies/v2/`
# The resource is `reviews/search.json`
# See the interactive console for parameter details:
#   https://developer.nytimes.com/movie_reviews_v2.json
#
# You should use YOUR api key (as the `api-key` parameter)
# and your `movie_name` variable as the search query!
base_uri <- "https://api.nytimes.com/svc/movies/v2/"
response <- paste0(base_uri, resource)
uri <- paste0(base_uri, resource)
response <- GET(uri, query = "movie_name")
library("httr")
library("jsonlite")
response <- GET(uri, query = "movie_name")
body <- fromJSON(content(response, "text"))
body <- fromJSON(content(response, "text"))
body
response <- GET(uri, query = "movie_name")
body <- fromJSON(content(response, "text"))
setwd("~/Desktop/INFO201/book-exercises/chapter-18-exercises/exercise-1")
# Use `source()` to load your API key variable from the `apikey.R` file you made.
# Make sure you've set your working directory!
source("apikey.R")
response <- GET(uri, query = list(query = movie_name, "api_key" = movie_key))
# Create a variable `movie_name` that is the name of a movie of your choice.
movie_name <- "Finding Nemo"
response <- GET(uri, query = list(query = movie_name, "api_key" = movie_key))
body <- fromJSON(content(response, "text"))
base_uri <- "https://api.nytimes.com/svc/movies/v2/"
resource <- "reviews/search.json"
uri <- paste0(base_uri, resource)
response <- GET(uri, query = list("query" = movie_name, "api_key" = movie_key))
body <- fromJSON(content(response, "text"))
# Use `source()` to load your API key variable from the `apikey.R` file you made.
# Make sure you've set your working directory!
source("apikey.R")
# Create a variable `movie_name` that is the name of a movie of your choice.
movie_name <- "Finding Nemo"
# Construct an HTTP request to search for reviews for the given movie.
# The base URI is `https://api.nytimes.com/svc/movies/v2/`
# The resource is `reviews/search.json`
# See the interactive console for parameter details:
#   https://developer.nytimes.com/movie_reviews_v2.json
#
# You should use YOUR api key (as the `api-key` parameter)
# and your `movie_name` variable as the search query!
base_uri <- "https://api.nytimes.com/svc/movies/v2/"
resource <- "reviews/search.json"
uri <- paste0(base_uri, resource)
response <- GET(uri, query = list("query" = movie_name, "api_key" = movie_key))
response
body <- fromJSON(content(response, "text"))
source("apikey.R")
# Use `source()` to load your API key variable from the `apikey.R` file you made.
# Make sure you've set your working directory!
source("apikey.R")
response <- GET(uri, query = list("query" = movie_name, "api_key" = movie_key))
body <- fromJSON(content(response, "text"))
body
response <- GET(uri, query = list("query" = movie_name, "api-key" = movie_key))
body <- fromJSON(content(response, "text"))
body
movie_df <- body$results
movie_df
# What kind of data structure did this produce? A data frame? A list?
class(body)
# Manually inspect the returned data and identify the content of interest
# (which are the movie reviews).
# Use functions such as `names()`, `str()`, etc.
View(body)
names(body)
# Flatten the movie reviews content into a data structure called `reviews`
reviews <- body$results
reviews
# From the most recent review, store the headline, short summary, and link to
# the full article, each in their own variables
movie_headline <- reviews$headline
movie_short_sum <- reviews$summary_short
View(reviews)
article_link <- reviews$link
article_link
article_link <- reviews$link$url
article_link
# Create a list of the three pieces of information from above.
# Print out the list.
movie_info <- list(headline = movie_headline, short_summary <- movie_short_sum, link = article_link)
print(movie_info)
source("exercise.R")
print(movie_info)
# Create a list of the three pieces of information from above.
# Print out the list.
movie_info <- list(headline = movie_headline, short_sum <- movie_short_sum, link = article_link)
print(movie_info)
movie_short_sum <- reviews$summary_short
movie_short_sum
# Create a list of the three pieces of information from above.
# Print out the list.
movie_info <- list(headline = movie_headline, summar <- movie_short_sum, link = article_link)
print(movie_info)
# Install and load the `ggplot2` package
# You will also want to load `dplyr`
install.packages("ggplot2")
# Install and load the `ggplot2` package
# You will also want to load `dplyr`
#install.packages("ggplot2")
load("ggplot2")
# Install and load the `ggplot2` package
# You will also want to load `dplyr`
#install.packages("ggplot2")
library("ggplot2")
library("dpylr")
# Install and load the `ggplot2` package
# You will also want to load `dplyr`
#install.packages("ggplot2")
install.packages("dpylr")
library("dpylr")
# Install and load the `ggplot2` package
# You will also want to load `dplyr`
#install.packages("ggplot2")
install.packages("dplyr")
install.packages("dplyr")
library("dplyr")
# For this exercise you'll be working with the `diamonds` data set included in
# the ggplot2 library
# Use `?diamonds` to get more information about this data set (including the
# column descriptions. Also check the _column names_ and the _number of rows_
# in the data set
?diamonds
colnames(diamonds)
numrows(diamonds)
numrow(diamonds)
diamonds
rownum(diamonds)
nrow(diamonds)
# This data set has A LOT of rows. To make things a bit more readable,
# use dplyr's `sample_n()` function to get a random 1000 rows from the data set
# Store this sample in a variable `diamonds_sample`
diamonds_sample <- sample_n(diamonds, 1000)
# Start by making a new `ggplot` with the `diamonds_sample` as the data (no
# geometry yet)
# What do you see? (What did you expect?)
?ggplot
# Start by making a new `ggplot` with the `diamonds_sample` as the data (no
# geometry yet)
# What do you see? (What did you expect?)
ggplot(diamonds_sample)
diamonds_sample
# Start by making a new `ggplot` with the `diamonds_sample` as the data (no
# geometry yet)
# What do you see? (What did you expect?)
ggplot(diamonds_sample)
# Start by making a new `ggplot` with the `diamonds_sample` as the data (no
# geometry yet)
# What do you see? (What did you expect?)
ggplot(data = diamonds_sample)
# Draw a scatter plot (with point geometry) with for the `diamonds_sample` set,
# with the `carat` mapped to the x-position and `price` mapped to the y-position.
ggplot(data = diamonds_sample) + geom_point(mapping = aes(x = carat, y = price))
# Draw the same plot as above, but color each of the points based on their
# clarity.
ggplot(data = diamonds_sample) + geom_point(mapping = aes(x = carat, y = price, color = clarity))
# Draw the same plot as above, but for the entire `diamonds` data set. Note this
# may take a few seconds to generate.
ggplot(data = diamonds) + geom_point(mapping = aes(x = carat, y = price, color = clarity))
# Draw another scatter plot for `diamonds_sample` of price (y) by carat (x),
# but with all of the dots colored "blue".
# Hint: you'll need to set the color channel, not map a value to it!
ggplot(data = diamonds_sample) + geom_point(mapping = aes(x = carat, y = price, color = "blue"))
# Draw another scatter plot for `diamonds_sample` of price (y) by carat (x),
# but with all of the dots colored "blue".
# Hint: you'll need to set the color channel, not map a value to it!
ggplot(data = diamonds_sample) + geom_point(mapping = aes(x = carat, y = price, color = "red"))
# Draw another scatter plot for `diamonds_sample` of price (y) by carat (x),
# but with all of the dots colored "blue".
# Hint: you'll need to set the color channel, not map a value to it!
ggplot(data = diamonds_sample) + geom_point(mapping = aes(x = carat, y = price, color = "blue"))
# Draw another scatter plot for `diamonds_sample` of price (y) by carat (x),
# but with all of the dots colored "blue".
# Hint: you'll need to set the color channel, not map a value to it!
ggplot(data = diamonds_sample) + geom_point(mapping = aes(x = carat, y = price, color = "blue", alpha = .3))
# Draw another scatter plot for `diamonds_sample` of price (y) by carat (x),
# but with all of the dots colored "blue".
# Hint: you'll need to set the color channel, not map a value to it!
ggplot(data = diamonds_sample) + geom_point(mapping = aes(x = carat, y = price), color = "blue", alpha = .3))
# Draw another scatter plot for `diamonds_sample` of price (y) by carat (x),
# but with all of the dots colored "blue".
# Hint: you'll need to set the color channel, not map a value to it!
ggplot(data = diamonds_sample) + geom_point(mapping = aes(x = carat, y = price), color = "blue", alpha = .3)
# Draw another scatter plot for `diamonds_sample` of price (y) by carat (x),
# but with all of the dots colored "blue".
# Hint: you'll need to set the color channel, not map a value to it!
ggplot(data = diamonds_sample) + geom_point(mapping = aes(x = carat, y = price), color = "blue")
# Draw a scatter plot for `diamonds_sample` of `price` by `carat`, where each
# point has an aesthetic _shape_ based on the diamond's `cut`.
ggplot(data = diamonds_sample) + geom_point(mapping = aes(x = carat, y = price, aesthetic_shape = cut))
# Draw a scatter plot for `diamonds_sample` of *`cut`* by `carat`, where each
# point has an aesthetic _size_ based on the diamond's *`price`*
ggplot(data = diamonds_sample) + geom_point(mapping = aes(x = carat, y = cut), aesthetic_size =price)
# Draw a scatter plot for `diamonds_sample` of *`cut`* by `carat`, where each
# point has an aesthetic _size_ based on the diamond's *`price`*
ggplot(data = diamonds_sample) + geom_point(mapping = aes(x = carat, y = cut, aesthetic_size = price))
# Try coloring the above plot based on the diamond's price!
ggplot(data = diamonds_sample) + geom_point(mapping = aes(x = carat, y = cut, aesthetic_size = price, color = price))
# Draw a line plot (with line geometry) for `diamonds_sample`. The x-position
# should be mapped to carat, y-position to price, and color to cut.
ggplot(data = diamonds_sample) + geom_line(mapping = aes(x = carat, y = price, color = cut))
# That's kind of messy. Try using `smooth` geometry instead.
ggplot(data = diamonds_sample) + geom_smooth(mapping = aes(x = carat, y = price, color = cut))
# Draw a plot with column geometry (a bar chart), mapping the diamond's `cut` to
# the x-axis and `price` to the y-axis. Note that by default, column geometry
# will us the "sum" of all of the y-values, so that the chart is actually of the
# TOTAL value of all of the diamonds of that cut!
ggplot(data = diamonds_sample) + geom_col(mapping = aes(x = cut, y = price))
# Add an aesthetic property that will _fill_ each bar geometry based on the
# `clarity` of the diamonds.
# What kind of chart do you get?
ggplot(data = diamonds_sample) + geom_col(mapping = aes(x = cut, y = price, fill = clarity))
# Draw a plot of the `diamonds_sample` data (price by carat), with both points
# for each diamond AND smoothed lines for each cut (hint: in a separate color)
# Give the points an `alpha` (transparency) of 0.3 to make the plot look nicer
ggplot(data = diamonds_sample) + geom_col(mapping = aes(x = carat, y = price, color = cut, alpha = 0.3))
# Draw a plot of the `diamonds_sample` data (price by carat), with both points
# for each diamond AND smoothed lines for each cut (hint: in a separate color)
# Give the points an `alpha` (transparency) of 0.3 to make the plot look nicer
ggplot(data = diamonds_sample) + geom_point(mapping = aes(x = carat, y = price, color = cut, alpha = 0.3))
# Install and load the `ggplot2` package
#install.packages('ggplot2')
library("ggplot2")
# For this exercise you will again be working with the `diamonds` data set.
# Use `?diamonds` to review details about this data set
?diamonds
# Draw a column (bar) chart of diamonds cuts by price, with each bar filled by
# clarity. You should see a _stacked_ bar chart.
ggplot(data = diamonds_sample) + geom_col(mapping = aes(x = cut, y = price, fill = clarity))
# Draw the same chart again, but with each element positioned to "fill" the y axis
ggplot(data = diamonds_sample) + geom_col(mapping = aes(x = cut, y = price, fill = clarity), position = fill)
# Draw the same chart again, but with each element positioned to "fill" the y axis
ggplot(data = diamonds_sample) + geom_col(mapping = aes(x = cut, y = price, fill = clarity), position = "fill")
# Draw the same chart again, but with each element positioned to "dodge" each other
ggplot(data = diamonds_sample) + geom_col(mapping = aes(x = cut, y = price, fill = clarity), position = "dodge")
# Draw a plot with point geometry with the x-position mapped to `cut` and the
# y-position mapped to `clarity`
# This creates a "grid" grouping the points
ggplot(data = diamonds_sample) + geom_point(mapping = aes(x = cut, y = clarity))
# Use the "jitter" position adjustment to keep the points from all overlapping!
# (This works a little better with a sample of diamond data, such as from the
# previous exercise).
ggplot(data = diamonds_sample) + geom_point(mapping = aes(x = cut, y = clarity), position = "jitter")
# Draw a "boxplot" (with `geom_boxplot`) for the diamond's price (y) by color (x)
ggplot(data = diamonds_sample) + geom_boxplot(mapping = aes(x = color, y = price))
# This has a lot of outliers, making it harder to read. To fix this, draw the
# same plot but with a _logarithmic_ scale for the y axis.
ggplot(data = diamonds_sample) + geom_point(mapping = aes(x = cut, y = clarity), scale = "logarithmic")
# This has a lot of outliers, making it harder to read. To fix this, draw the
# same plot but with a _logarithmic_ scale for the y axis.
ggplot(data = diamonds_sample) + geom_point(mapping = aes(x = cut, y = clarity)) + scale_y_log10()
# This has a lot of outliers, making it harder to read. To fix this, draw the
# same plot but with a _logarithmic_ scale for the y axis.
ggplot(data = diamonds_sample) + geom_point(mapping = aes(x = cut, y = clarity)) + scale_y_log10()
# For another version, draw the same plot but with `violin` geometry instead of
# `boxplot` geometry!
# How does the logarithmic scale change the data presentation?
ggplot(data = diamonds_sample) + geom_violin(mapping = aes(x = cut, y = clarity))
# For another version, draw the same plot but with `violin` geometry instead of
# `boxplot` geometry!
# How does the logarithmic scale change the data presentation?
ggplot(data = diamonds_sample) + geom_violin(mapping = aes(x = cut, y = clarity)) + scale_y_log10()
# This has a lot of outliers, making it harder to read. To fix this, draw the
# same plot but with a _logarithmic_ scale for the y axis.
ggplot(data = diamonds_sample) + geom_point(mapping = aes(x = cut, y = clarity)) + scale_y_continuous(trans='log10')
# Another interesting plot: draw a plot of the diamonds price (y) by carat (x),
# using a heatmap of 2d bins (geom_bin2d)
# What happens when you make the x and y channels scale logarithmically?
ggplot(data = diamonds_sample) + geom_violin(mapping = aes(x = carat, y = price)) + scale_y_log10() + heatmap(geom_bin2d())
# Draw a scatter plot for the diamonds price (y) by carat (x). Color each point
# by the clarity (Remember, this will take a while. Use a sample of the diamonds
# for faster results)
gplot(data = diamonds_sample) + geom_point(mapping = aes(x = carat, y = price, color = clarity))
# Change the color of the previous plot using a ColorBrewer scale of your choice.
# What looks nice?
ggplot(data = diamonds_sample) + geom_point(mapping = aes(x = carat, y = price, color = clarity))
# Change the color of the previous plot using a ColorBrewer scale of your choice.
# What looks nice?
ggplot(data = diamonds_sample) + geom_point(mapping = aes(x = carat, y = price, color = clarity)) + scale_color_brewer(palette = "Set3")
# Draw a bar chart with x-position and fill color BOTH mapped to cut
# For best results, SET the `width` of the geometry to be 1 (fill plot, no space
# between)
# TIP: You can save the plot to a variable for easier modifications
ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut, color = cut, width = 1))
# Draw a bar chart with x-position and fill color BOTH mapped to cut
# For best results, SET the `width` of the geometry to be 1 (fill plot, no space
# between)
# TIP: You can save the plot to a variable for easier modifications
ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut, color = cut)) +geom_bar(width = 1)
# Draw a bar chart with x-position and fill color BOTH mapped to cut
# For best results, SET the `width` of the geometry to be 1 (fill plot, no space
# between)
# TIP: You can save the plot to a variable for easier modifications
ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut, color = cut)) + geom_bar(width = 1)
# Draw the same chart, but with the coordinate system flipped
ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut, color = cut)) + geom_bar(width = 1) + coord_flip()
?geom_bar
# Draw the same chart, but in a polar coordinate system. It's a Coxcomb chart!
ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut, color = cut)) + geom_bar(width = 1) + coord_polar(theta = "y")
# Take the scatter plot of price by carat data (colored by clarity) and add
# _facets_ based on the diamond's `color`
ggplot(data = diamonds_sample) + geom_point(mapping = aes(x = carat, y = price, color = clarity)) + facet_wrap(~color)
setwd("~/Desktop/INFO201/book-exercises/chapter-16-exercises/exercise-2")
# Use the `ggsave()` function to save the current (recent) plot to disk.
# Name the output file "my-plot.png".
# Make sure you've set the working directory!!
ggsave("my-plot.png")
