# Use the `read.csv()` functoin to read the data from the `data/gates_money.csv`
# file into a variable called `grants` using the `read.csv()`
# Be sure to set your working directory in RStudio, and do NOT treat strings as
# factors!
read.csv(gates_money.csv)
setwd("~/Desktop/INFO201/book-exercises/chapter-10-exercises/exercise-4/data")
# Use the `read.csv()` functoin to read the data from the `data/gates_money.csv`
# file into a variable called `grants` using the `read.csv()`
# Be sure to set your working directory in RStudio, and do NOT treat strings as
# factors!
read.csv(gates_money.csv)
pwd()
pwd
getwd()
# Use the `read.csv()` functoin to read the data from the `data/gates_money.csv`
# file into a variable called `grants` using the `read.csv()`
# Be sure to set your working directory in RStudio, and do NOT treat strings as
# factors!
grants <- read.csv(gates_money.csv)
# Use the `read.csv()` functoin to read the data from the `data/gates_money.csv`
# file into a variable called `grants` using the `read.csv()`
# Be sure to set your working directory in RStudio, and do NOT treat strings as
# factors!
grants <- read.csv("gates_money.csv")
# Use the View function to look at the loaded data
View(grants)
# Create a variable `organization` that contains the `organization` column of
# the dataset
organization <- grants$organization
# Confirm that the "organization" column is a vector using the `is.vector()`
# function.
# This is a useful debugging tip if you hit errors later!
is.vector(organization)
# Create a variable `organization` that contains the `organization` column of
# the dataset
organization <- grants[,organization]
# Create a variable `organization` that contains the `organization` column of
# the dataset
organization <- grants[organization]
# Create a variable `organization` that contains the `organization` column of
# the dataset
organization <- grants[organization, ]
# Confirm that the "organization" column is a vector using the `is.vector()`
# function.
# This is a useful debugging tip if you hit errors later!
is.vector(organization)
# Use the `read.csv()` functoin to read the data from the `data/gates_money.csv`
# file into a variable called `grants` using the `read.csv()`
# Be sure to set your working directory in RStudio, and do NOT treat strings as
# factors!
grants <- read.csv("gates_money.csv", stringsAsFactors = FALSE)
# Use the View function to look at the loaded data
View(grants)
# Create a variable `organization` that contains the `organization` column of
# the dataset
organization <- grants$organization
# Confirm that the "organization" column is a vector using the `is.vector()`
# function.
# This is a useful debugging tip if you hit errors later!
is.vector(organization)
# What was the mean grant value?
mean(grants$total_amount, na.rm = FALSE)
# What was the dollar amount of the largest grant?
max(grants$total_amount)
# What was the dollar amount of the smallest grant?
min(grants$total_amount)
# What was the dollar amount of the smallest grant?
smalles_grant <- min(grants$total_amount)
# What was the dollar amount of the largest grant?
largest_grant <- max(grants$total_amount)
# Which organization received the largest grant?
organization[grants$total_amount = largest_grant]
# Which organization received the largest grant?
organization[grants$total_amount == largest_grant]
# Which organization received the smallest grant?
organization[grants$total_amount == smallest_grant]
# What was the dollar amount of the smallest grant?
smallest_grant <- min(grants$total_amount)
# Which organization received the smallest grant?
organization[grants$total_amount == smallest_grant]
# Which organization received the largest grant?
largest_grant_org <- organization[grants$total_amount == largest_grant]
# Which organization received the smallest grant?
smallest_grant_org <- organization[grants$total_amount == smallest_grant]
# How many grants were awarded in 2010?
length(grants$start_year == "2010")
# How many grants were awarded in 2010?
length(grants$start_year[grants$start_year == "2010"])
# Install the `"nycflights13"` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
library(nycflights13)
# Install the `"nycflights13"` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
library("nycflights13")
library('dplyr')
library(dplyr)
# Install the `"nycflights13"` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
library(nycflights13)
?library
?load
load(dplyr)
# You'll also need to load `dplyr`
library(nycflights13)
library(dplyr)
# Install the `"nycflights13"` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
library(nycflights13)
# Install the `"nycflights13"` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
install(nycflights13)
install.packages("nycflights13")
# Install the `"nycflights13"` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
library(nycflights13)
library(dplyr)
laod(dplyr)
install.packages("dplyr")
library(dplyr)
Yes
install.packages("dplyr")
library(dplyr)
# The data frame `flights` should now be accessible to you.
# Use functions to inspect it: how many rows and columns does it have?
# What are the names of the columns?
# Use `??flights` to search for documentation on the data set (for what the
# columns represent)
ncols(flights)
# The data frame `flights` should now be accessible to you.
# Use functions to inspect it: how many rows and columns does it have?
# What are the names of the columns?
# Use `??flights` to search for documentation on the data set (for what the
# columns represent)
ncol(flights)
# Install the `"nycflights13"` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
library(nycflights13)
library(dplyr)
# The data frame `flights` should now be accessible to you.
# Use functions to inspect it: how many rows and columns does it have?
# What are the names of the columns?
# Use `??flights` to search for documentation on the data set (for what the
# columns represent)
flights
ncol(flights)
nrow(flights)
???flights
??flights
names(flights)
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained or lost while flying (that is: how much of the delay arriving occured
# during flight, as opposed to before departing).
dplyr
library(dplyr)
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained or lost while flying (that is: how much of the delay arriving occured
# during flight, as opposed to before departing).
dplyr
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained or lost while flying (that is: how much of the delay arriving occured
# during flight, as opposed to before departing).
?dplyr
library("dplyr")
# The data frame `flights` should now be accessible to you.
# Use functions to inspect it: how many rows and columns does it have?
# What are the names of the columns?
# Use `??flights` to search for documentation on the data set (for what the
# columns represent)
flights
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained or lost while flying (that is: how much of the delay arriving occured
# during flight, as opposed to before departing).
flights <- mutate(flights, time_lost_gained = dep_delay - arr_delay)
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained or lost while flying (that is: how much of the delay arriving occured
# during flight, as opposed to before departing).
flights <- mutate(flights, time_lost_gained = dep_delay - arr_delay)
# The data frame `flights` should now be accessible to you.
# Use functions to inspect it: how many rows and columns does it have?
# What are the names of the columns?
# Use `??flights` to search for documentation on the data set (for what the
# columns represent)
flights
# Use `dplyr` to sort your data frame in descending order by the column you just
# created. Remember to save this as a variable (or in the same one!)
desc(flights, time_lost_gained)
# Use `dplyr` to sort your data frame in descending order by the column you just
# created. Remember to save this as a variable (or in the same one!)
desc(flights, time_lost_gained)
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained or lost while flying (that is: how much of the delay arriving occured
# during flight, as opposed to before departing).
flights <- mutate(flights, time_lost_gained <- dep_delay - arr_delay)
# Use `dplyr` to sort your data frame in descending order by the column you just
# created. Remember to save this as a variable (or in the same one!)
desc(flights, time_lost_gained)
# The data frame `flights` should now be accessible to you.
# Use functions to inspect it: how many rows and columns does it have?
# What are the names of the columns?
# Use `??flights` to search for documentation on the data set (for what the
# columns represent)
flights
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained or lost while flying (that is: how much of the delay arriving occured
# during flight, as opposed to before departing).
flights <- mutate(flights, time_lost_gained = dep_delay - arr_delay)
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained or lost while flying (that is: how much of the delay arriving occured
# during flight, as opposed to before departing).
time_lost_gained <- dep_delay - arr_delay
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained or lost while flying (that is: how much of the delay arriving occured
# during flight, as opposed to before departing).
time_lost_gained <- select(flights, dep_delay) - select(flights, arr_delay)
flights <- mutate(flights, time_lost_gained)
# The data frame `flights` should now be accessible to you.
# Use functions to inspect it: how many rows and columns does it have?
# What are the names of the columns?
# Use `??flights` to search for documentation on the data set (for what the
# columns represent)
flights
# Use `dplyr` to sort your data frame in descending order by the column you just
# created. Remember to save this as a variable (or in the same one!)
desc(flights, time_lost_gained)
# Use `dplyr` to sort your data frame in descending order by the column you just
# created. Remember to save this as a variable (or in the same one!)
arrange(flights, desc(time_lost_gained))
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained or lost while flying (that is: how much of the delay arriving occured
# during flight, as opposed to before departing).
flights <- mutate(flights, time_lost_gained = dep_delay - arr_delay)
# Use `dplyr` to sort your data frame in descending order by the column you just
# created. Remember to save this as a variable (or in the same one!)
arrange(flights, desc(time_lost_gained))
# Use `dplyr` to sort your data frame in descending order by the column you just
# created. Remember to save this as a variable (or in the same one!)
flights <- arrange(flights, desc(time_lost_gained))
# For practice, repeat the last 2 steps in a single statement using the pipe
# operator. You can clear your environmental variables to "reset" the data frame
flights <- arrange(flights, desc(mutate(flights, time_lost_gained = dep_delay - arr_delay)))
# Install the `"nycflights13"` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
install.packages("nycflights13")
install.packages("nycflights13")
# Install the `"nycflights13"` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
#install.packages("nycflights13")
library("nycflights13")
library("dplyr")
# The data frame `flights` should now be accessible to you.
# Use functions to inspect it: how many rows and columns does it have?
# What are the names of the columns?
# Use `??flights` to search for documentation on the data set (for what the
# columns represent)
flights
# For practice, repeat the last 2 steps in a single statement using the pipe
# operator. You can clear your environmental variables to "reset" the data frame
flights <- arrange(flights, desc(mutate(flights, time_lost_gained = dep_delay - arr_delay)))
# Install the `"nycflights13"` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
install.packages("nycflights13")
install.packages("nycflights13")
library("nycflights13")
install.packages("dplyr")
library("dplyr")
library("dplyr")
# The data frame `flights` should now be accessible to you.
# Use functions to inspect it: how many rows and columns does it have?
# What are the names of the columns?
# Use `??flights` to search for documentation on the data set (for what the
# columns represent)
flights
# For practice, repeat the last 2 steps in a single statement using the pipe
# operator. You can clear your environmental variables to "reset" the data frame
flights <- arrange(flights, desc(mutate(flights, time_lost_gained = dep_delay - arr_delay)))
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained or lost while flying (that is: how much of the delay arriving occured
# during flight, as opposed to before departing).
flights <- mutate(flights, time_gained = dep_delay - arr_delay)
# Use `dplyr` to sort your data frame in descending order by the column you just
# created. Remember to save this as a variable (or in the same one!)
flights <- arrange(flights, desc(time_gained))
# For practice, repeat the last 2 steps in a single statement using the pipe
# operator. You can clear your environmental variables to "reset" the data frame
flights <- arrange(flights, desc(mutate(flights, time_gained = dep_delay - arr_delay)))
# For practice, repeat the last 2 steps in a single statement using the pipe
# operator. You can clear your environmental variables to "reset" the data frame
flights %>%
mutate(flights, time_gained = dep_delay - arr_delay) %>%
arrange(flights, desc(time_gained)) %>%
flights %>%
mutate(flights, time_gained = dep_delay - arr_delay) %>%
arrange(flights, desc(time_gained)) %>%
flights %>%
mutate(flights, time_gained = dep_delay - arr_delay) %>%
arrange(flights, desc(time_gained)) %>%
# For practice, repeat the last 2 steps in a single statement using the pipe
# operator. You can clear your environmental variables to "reset" the data frame
flights %>%
mutate(flights, time_gained = dep_delay - arr_delay) %>%
arrange(flights, desc(time_gained)) %>%
flights
# The data frame `flights` should now be accessible to you.
# Use functions to inspect it: how many rows and columns does it have?
# What are the names of the columns?
# Use `??flights` to search for documentation on the data set (for what the
# columns represent)
flights
# For practice, repeat the last 2 steps in a single statement using the pipe
# operator. You can clear your environmental variables to "reset" the data frame
flights %>%
mutate(flights, time_gained = dep_delay - arr_delay) %>%
arrange(flights, desc(time_gained)) %>%
flights
flights %>%
mutate(flights, time_gained = dep_delay - arr_delay) %>%
arrange(flights, desc(time_gained)) %>%
# The data frame `flights` should now be accessible to you.
# Use functions to inspect it: how many rows and columns does it have?
# What are the names of the columns?
# Use `??flights` to search for documentation on the data set (for what the
# columns represent)
flights
# The data frame `flights` should now be accessible to you.
# Use functions to inspect it: how many rows and columns does it have?
# What are the names of the columns?
# Use `??flights` to search for documentation on the data set (for what the
# columns represent)
flights
# Make a histogram of the amount of time gained using the `hist()` function
hist(time_gained)
?hist
# Make a histogram of the amount of time gained using the `hist()` function
hist(flights$time_gained)
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained or lost while flying (that is: how much of the delay arriving occured
# during flight, as opposed to before departing).
time_gained <- dep_delay - arr_delay
# Install the `"nycflights13"` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
install.packages("nycflights13")
install.packages("nycflights13")
library("nycflights13")
library("dplyr")
# The data frame `flights` should now be accessible to you.
# Use functions to inspect it: how many rows and columns does it have?
# What are the names of the columns?
# Use `??flights` to search for documentation on the data set (for what the
# columns represent)
flights
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained or lost while flying (that is: how much of the delay arriving occured
# during flight, as opposed to before departing).
time_gained <- dep_delay - arr_delay
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained or lost while flying (that is: how much of the delay arriving occured
# during flight, as opposed to before departing).
flights <- mutate(flights, time_gained = dep_delay - arr_delay)
# Use `dplyr` to sort your data frame in descending order by the column you just
# created. Remember to save this as a variable (or in the same one!)
flights <- arrange(flights, desc(time_gained))
# Make a histogram of the amount of time gained using the `hist()` function
hist(flights$time_gained)
# Make a histogram of the amount of time gained using the `hist()` function
hist(flights[time_gained])
# Make a histogram of the amount of time gained using the `hist()` function
hist(flights[,time_gained])
# Make a histogram of the amount of time gained using the `hist()` function
hist(flights$time_gained)
# On average, did flights gain or lose time?
# Note: use the `na.rm = TRUE` argument to remove NA values from your aggregation
mean(flights$time_gained, na.rm - TRUE)
# On average, did flights gain or lose time?
# Note: use the `na.rm = TRUE` argument to remove NA values from your aggregation
mean(flights$time_gained, na.rm = TRUE)
# The data frame `flights` should now be accessible to you.
# Use functions to inspect it: how many rows and columns does it have?
# What are the names of the columns?
# Use `??flights` to search for documentation on the data set (for what the
# columns represent)
flights
# Create a data.frame of flights headed to SeaTac ('SEA'), only including the
# origin, destination, and the "gain_in_air" column you just created
seatac_df <- data.frame(select(flights, origin, dest, time_gained)
seatac_df
# Create a data.frame of flights headed to SeaTac ('SEA'), only including the
# origin, destination, and the "gain_in_air" column you just created
seatac_df <- data.frame(select(flights, origin, dest, time_gained))
seatac_df
# Create a data.frame of flights headed to SeaTac ('SEA'), only including the
# origin, destination, and the "gain_in_air" column you just created
seatac_df <- data.frame(select(flights, origin, dest = "SEA", time_gained))
# Create a data.frame of flights headed to SeaTac ('SEA'), only including the
# origin, destination, and the "gain_in_air" column you just created
seatac_df <- data.frame(select(flights, origin, dest = ends_with("SEA"), time_gained))
seatac_df
# Create a data.frame of flights headed to SeaTac ('SEA'), only including the
# origin, destination, and the "gain_in_air" column you just created
seatac_df <- data.frame(select(flights, origin, dest, time_gained))
seatac_df
head(seatac_df)
# Create a data.frame of flights headed to SeaTac ('SEA'), only including the
# origin, destination, and the "gain_in_air" column you just created
seatac_df <- data.frame(select(flights, origin, dest[dest == "SEA"], time_gained))
# Create a data.frame of flights headed to SeaTac ('SEA'), only including the
# origin, destination, and the "gain_in_air" column you just created
seatac_df <- data.frame(select(flights, origin, dest == "SEA", time_gained))
head(seatac_df)
# Create a data.frame of flights headed to SeaTac ('SEA'), only including the
# origin, destination, and the "gain_in_air" column you just created
seatac_df <- data.frame(select(flights, origin, dest, time_gained))
head(seatac_df)
# Create a data.frame of flights headed to SeaTac ('SEA'), only including the
# origin, destination, and the "gain_in_air" column you just created
seatac_df <- data.frame(select(flights, origin, dest[dest == "SEA"], time_gained))
# Create a data.frame of flights headed to SeaTac ('SEA'), only including the
# origin, destination, and the "gain_in_air" column you just created
seatac_df <- data.frame(select(flights, dest)
# Create a data.frame of flights headed to SeaTac ('SEA'), only including the
# origin, destination, and the "gain_in_air" column you just created
seatac_df <- data.frame(select(flights, dest)
# Create a data.frame of flights headed to SeaTac ('SEA'), only including the
# origin, destination, and the "gain_in_air" column you just created
seatac_df <- data.frame(select(flights, dest))
head(seatac_df)
# Create a data.frame of flights headed to SeaTac ('SEA'), only including the
# origin, destination, and the "gain_in_air" column you just created
seatac_df <- data.frame(select(flights, ends_with(dest == "SEA")))
head(seatac_df)
# Create a data.frame of flights headed to SeaTac ('SEA'), only including the
# origin, destination, and the "gain_in_air" column you just created
seatac_df <- data.frame(select(flights, dest))
head(seatac_df)
# Create a data.frame of flights headed to SeaTac ('SEA'), only including the
# origin, destination, and the "gain_in_air" column you just created
seatac_df <- data.frame(select(flights, dest[dest == "SEA"]))
head(seatac_df)
# Create a data.frame of flights headed to SeaTac ('SEA'), only including the
# origin, destination, and the "gain_in_air" column you just created
seatac_df <- data.frame(flight %>% select(origin, dest, time_gained) %>% filter(dest == "SEA"))
# Create a data.frame of flights headed to SeaTac ('SEA'), only including the
# origin, destination, and the "gain_in_air" column you just created
seatac_df <- data.frame(flights %>% select(origin, dest, time_gained) %>% filter(dest == "SEA"))
head(seatac_df)
# Create a data.frame of flights headed to SeaTac ('SEA'), only including the
# origin, destination, and the "gain_in_air" column you just created
seatac_df <- data.frame(flights %>% select(origin, dest, time_gained) %>% filter(dest == "SEA"))
# On average, did flights to SeaTac gain or loose time?
mean(seatac_df$time_gained, na.rm = TRUE)
# Consider flights from JFK to SEA. What was the average, min, and max air time
# of those flights? Bonus: use pipes to answer this question in one statement
# (without showing any other data)!
seatac_df
head(seatac_df)
# Consider flights from JFK to SEA. What was the average, min, and max air time
# of those flights? Bonus: use pipes to answer this question in one statement
# (without showing any other data)!
mean(flights, flights$air_time %>% filter(origin == "JFK") %>% filter(dest == "SEA") )
# Consider flights from JFK to SEA. What was the average, min, and max air time
# of those flights? Bonus: use pipes to answer this question in one statement
# (without showing any other data)!
jfk_sea <- data.frame(flights %>% select(origin, dest, air_time) %>% filter(dest == "SEA") %>% filter(origin == "JFK"))
head(jfk_sea)
mean(jfk_sea$air_time, na.rm = TRUE)
min(jfk_sea$air_time, na.rm = TRUE)
max(jfk_sea$air_time, na.rm = TRUE)
