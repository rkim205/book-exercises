print(winter_finals_end)
winter_finals_end
days_to_deadline <- function(deadline, today) {  # create function with inputs deadline and today
days_remaining <- as.Date(deadline) - as.Date(today)  # assigns variable days_remaining with deadline date today's date that have been changed to date format
return(days_remaining)  # returns variable days_remaining
}
# 2. What will each of the following lines return?
#   Note, you may need to print the variables.
a2_days_left <- days_to_deadline("2020-01-23", "2020-01-14")
print(a2_days_left)
winter_finals_end <- days_to_deadline("2020-03-20", "2020-01-14")
print(winter_finals_end)
july_fourth <- days_to_deadline("2020-07-04", "2020-01-14")
print(july_fourth)
# =====================================
# title: "INFO 201 Lab 2 Exercises"
# author: [Ryan Kim]
# date: "January 14, 2020"
# =====================================
#
#   In groups of three, you will now work on the following exercises where you will practice:
#
#   * Creating user-defined functions
#   * Calling user-defined functions
#
#  REPLACE ALL THE '____' WITH YOUR SOLUTIONS.
#
# # Exercise 1. Ratio Calculator -------------------------------------------
#
#  1. Define function 'calculate_ratio()' that takes x and divides it by y.
#  2. Create the variable 'ratio' and assign your calculation to it.
#  3. Return ratio variable.
#  4. Call calculate_ratio() with arguments 60 and 12.
#
# Define calculate_ratio() function
calculate_ratio <- function(x, y) {
ratio <- x / y
return(ratio)
}
# Call calculate_ratio()
calculate_ratio(60, 12)
# Exercise 2. Introduction Generator ----------------------------------------
#
# 1. Define function 'intro()' that takes the following two arguments: year and major.
# 2. The function will return a character string of the format
#   "Hello I am a {YEAR} year, and my major is {MAJOR}." (replacing {YEAR} and {MAJOR} with the appropriate argument values).
# 3. Assign this character string to the variable 'greet'.
# 4. Return greet variable.
# 5. Call intro() function using your name and major as arguments.
#
#  Define intro() function
intro <- function(year, major) {
greet <- paste("Hello I am a", year, "year, and my major is", major)
return(greet)
}
# Call intro() function
intro("second", "Ryan")
# Bonus: Exercise 3. Days Counter --------------------------------------------
#
# 1. Write code comments for each line to describe what the function is doing.
#
days_to_deadline <- function(deadline, today) {  # create function with inputs deadline and today
days_remaining <- as.Date(deadline) - as.Date(today)  # assigns variable days_remaining with deadline date today's date that have been changed to date format
return(days_remaining)  # returns variable days_remaining
}
# 2. What will each of the following lines return?
#   Note, you may need to print the variables.
a2_days_left <- days_to_deadline("2020-01-23", "2020-01-14")
print(a2_days_left)
winter_finals_end <- days_to_deadline("2020-03-20", "2020-01-14")
print(winter_finals_end)
july_fourth <- days_to_deadline("2020-07-04", "2020-01-14")
print(july_fourth)
# END
# =====================================
# title: "INFO 201 Lab 2 Exercises"
# author: [Ryan Kim]
# date: "January 14, 2020"
# =====================================
#
#   In groups of three, you will now work on the following exercises where you will practice:
#
#   * Creating user-defined functions
#   * Calling user-defined functions
#
#  REPLACE ALL THE '____' WITH YOUR SOLUTIONS.
#
# # Exercise 1. Ratio Calculator -------------------------------------------
#
#  1. Define function 'calculate_ratio()' that takes x and divides it by y.
#  2. Create the variable 'ratio' and assign your calculation to it.
#  3. Return ratio variable.
#  4. Call calculate_ratio() with arguments 60 and 12.
#
# Define calculate_ratio() function
calculate_ratio <- function(x, y) {
ratio <- x / y
return(ratio)
}
# Call calculate_ratio()
calculate_ratio(60, 12)
# Exercise 2. Introduction Generator ----------------------------------------
#
# 1. Define function 'intro()' that takes the following two arguments: year and major.
# 2. The function will return a character string of the format
#   "Hello I am a {YEAR} year, and my major is {MAJOR}." (replacing {YEAR} and {MAJOR} with the appropriate argument values).
# 3. Assign this character string to the variable 'greet'.
# 4. Return greet variable.
# 5. Call intro() function using your name and major as arguments.
#
#  Define intro() function
intro <- function(year, major) {
greet <- paste("Hello I am a", year, "year, and my major is", major)
return(greet)
}
# Call intro() function
intro("second", "info")
# Bonus: Exercise 3. Days Counter --------------------------------------------
#
# 1. Write code comments for each line to describe what the function is doing.
#
days_to_deadline <- function(deadline, today) {  # create function with inputs deadline and today
days_remaining <- as.Date(deadline) - as.Date(today)  # assigns variable days_remaining with deadline date today's date that have been changed to date format
return(days_remaining)  # returns variable days_remaining
}
# 2. What will each of the following lines return?
#   Note, you may need to print the variables.
a2_days_left <- days_to_deadline("2020-01-23", "2020-01-14")
print(a2_days_left)
winter_finals_end <- days_to_deadline("2020-03-20", "2020-01-14")
print(winter_finals_end)
july_fourth <- days_to_deadline("2020-07-04", "2020-01-14")
print(july_fourth)
# END
# =====================================
# title: "INFO 201 Lab 2 Exercises"
# author: [Ryan Kim]
# date: "January 14, 2020"
# =====================================
#
#   In groups of three, you will now work on the following exercises where you will practice:
#
#   * Creating user-defined functions
#   * Calling user-defined functions
#
#  REPLACE ALL THE '____' WITH YOUR SOLUTIONS.
#
# # Exercise 1. Ratio Calculator -------------------------------------------
#
#  1. Define function 'calculate_ratio()' that takes x and divides it by y.
#  2. Create the variable 'ratio' and assign your calculation to it.
#  3. Return ratio variable.
#  4. Call calculate_ratio() with arguments 60 and 12.
#
# Define calculate_ratio() function
calculate_ratio <- function(x, y) {
ratio <- x / y
return(ratio)
}
# Call calculate_ratio()
calculate_ratio(60, 12)
# Exercise 2. Introduction Generator ----------------------------------------
#
# 1. Define function 'intro()' that takes the following two arguments: year and major.
# 2. The function will return a character string of the format
#   "Hello I am a {YEAR} year, and my major is {MAJOR}." (replacing {YEAR} and {MAJOR} with the appropriate argument values).
# 3. Assign this character string to the variable 'greet'.
# 4. Return greet variable.
# 5. Call intro() function using your name and major as arguments.
#
#  Define intro() function
intro <- function(year, major) {
greet <- paste("Hello I am a", year, "year, and my major is", major, ".")
return(greet)
}
# Call intro() function
intro("second", "info")
# Bonus: Exercise 3. Days Counter --------------------------------------------
#
# 1. Write code comments for each line to describe what the function is doing.
#
days_to_deadline <- function(deadline, today) {  # create function with inputs deadline and today
days_remaining <- as.Date(deadline) - as.Date(today)  # assigns variable days_remaining with deadline date today's date that have been changed to date format
return(days_remaining)  # returns variable days_remaining
}
# 2. What will each of the following lines return?
#   Note, you may need to print the variables.
a2_days_left <- days_to_deadline("2020-01-23", "2020-01-14")
print(a2_days_left)
winter_finals_end <- days_to_deadline("2020-03-20", "2020-01-14")
print(winter_finals_end)
july_fourth <- days_to_deadline("2020-07-04", "2020-01-14")
print(july_fourth)
# END
# =====================================
# title: "INFO 201 Lab 2 Exercises"
# author: [Ryan Kim]
# date: "January 14, 2020"
# =====================================
#
#   In groups of three, you will now work on the following exercises where you will practice:
#
#   * Creating user-defined functions
#   * Calling user-defined functions
#
#  REPLACE ALL THE '____' WITH YOUR SOLUTIONS.
#
# # Exercise 1. Ratio Calculator -------------------------------------------
#
#  1. Define function 'calculate_ratio()' that takes x and divides it by y.
#  2. Create the variable 'ratio' and assign your calculation to it.
#  3. Return ratio variable.
#  4. Call calculate_ratio() with arguments 60 and 12.
#
# Define calculate_ratio() function
calculate_ratio <- function(x, y) {
ratio <- x / y
return(ratio)
}
# Call calculate_ratio()
calculate_ratio(60, 12)
# Exercise 2. Introduction Generator ----------------------------------------
#
# 1. Define function 'intro()' that takes the following two arguments: year and major.
# 2. The function will return a character string of the format
#   "Hello I am a {YEAR} year, and my major is {MAJOR}." (replacing {YEAR} and {MAJOR} with the appropriate argument values).
# 3. Assign this character string to the variable 'greet'.
# 4. Return greet variable.
# 5. Call intro() function using your name and major as arguments.
#
#  Define intro() function
intro <- function(year, major) {
greet <- paste("Hello I am a ", year, " year, and my major is ", major, ".", sep="")
return(greet)
}
# Call intro() function
intro("second", "info")
# Bonus: Exercise 3. Days Counter --------------------------------------------
#
# 1. Write code comments for each line to describe what the function is doing.
#
days_to_deadline <- function(deadline, today) {  # create function with inputs deadline and today
days_remaining <- as.Date(deadline) - as.Date(today)  # assigns variable days_remaining with deadline date today's date that have been changed to date format
return(days_remaining)  # returns variable days_remaining
}
# 2. What will each of the following lines return?
#   Note, you may need to print the variables.
a2_days_left <- days_to_deadline("2020-01-23", "2020-01-14")
print(a2_days_left)
winter_finals_end <- days_to_deadline("2020-03-20", "2020-01-14")
print(winter_finals_end)
july_fourth <- days_to_deadline("2020-07-04", "2020-01-14")
print(july_fourth)
# END
# Create a variable `lyric` that contains the text "I like to eat apples and
# bananas"
lyric <- "I like to eat apples and bananas"
# Use the `substr()` function to extract the 1st through 13th letters from the
# `lyric`, and store the result in a variable called `intro`
# Use `?substr` to see more about this function
intro <- lyric.substr(1, 13)
# Use the `substr()` function to extract the 1st through 13th letters from the
# `lyric`, and store the result in a variable called `intro`
# Use `?substr` to see more about this function
?substr
# Use the `substr()` function to extract the 1st through 13th letters from the
# `lyric`, and store the result in a variable called `intro`
# Use `?substr` to see more about this function
intro <- substr(lyric, 1, 13)
# Use the `substr()` function to extract the 1st through 13th letters from the
# `lyric`, and store the result in a variable called `intro`
# Use `?substr` to see more about this function
intro <- substr(lyric, 1, 16)
# Use the `substr()` function to extract the 1st through 13th letters from the
# `lyric`, and store the result in a variable called `intro`
# Use `?substr` to see more about this function
intro <- substr(lyric, 1, 17)
# Use the `substr()` function to extract the 15th through the last letter of the
# `lyric`, and store the result in a variable called `fruits`
# Hint: use `nchar()` to determine how many total letters there are!
fruits <- substr(lyric, 19)
# Use the `substr()` function to extract the 15th through the last letter of the
# `lyric`, and store the result in a variable called `fruits`
# Hint: use `nchar()` to determine how many total letters there are!
fruits <- substr(lyric, 19, 22)
# Use the `substr()` function to extract the 15th through the last letter of the
# `lyric`, and store the result in a variable called `fruits`
# Hint: use `nchar()` to determine how many total letters there are!
fruits <- substr(lyric, 19, 21)
# Use the `substr()` function to extract the 15th through the last letter of the
# `lyric`, and store the result in a variable called `fruits`
# Hint: use `nchar()` to determine how many total letters there are!
fruits <- substr(lyric, 19, 20)
# Use the `substr()` function to extract the 15th through the last letter of the
# `lyric`, and store the result in a variable called `fruits`
# Hint: use `nchar()` to determine how many total letters there are!
fruits <- substr(lyric, 19, 25)
# Use the `substr()` function to extract the 15th through the last letter of the
# `lyric`, and store the result in a variable called `fruits`
# Hint: use `nchar()` to determine how many total letters there are!
fruits <- substr(lyric, 19, 33)
# Use the `substr()` function to extract the 15th through the last letter of the
# `lyric`, and store the result in a variable called `fruits`
# Hint: use `nchar()` to determine how many total letters there are!
fruits <- substr(lyric, 19, 32)
# Use the `substr()` function to extract the 15th through the last letter of the
# `lyric`, and store the result in a variable called `fruits`
# Hint: use `nchar()` to determine how many total letters there are!
fruits <- substr(lyric, 19, 31)
# Use the `substr()` function to extract the 15th through the last letter of the
# `lyric`, and store the result in a variable called `fruits`
# Hint: use `nchar()` to determine how many total letters there are!
fruits <- substr(lyric, 19, 32)
num <- nchar(lyric)
# Use the `gsub()` function to substitute all the "a"s in `fruits` with "ee".
# Store the result in a variable called `fruits_e`
# Hint: see http://www.endmemo.com/program/R/sub.php for a simpmle example (or
# use `?gsub`)
?gsub
# Use the `gsub()` function to substitute all the "a"s in `fruits` with "ee".
# Store the result in a variable called `fruits_e`
# Hint: see http://www.endmemo.com/program/R/sub.php for a simpmle example (or
# use `?gsub`)
fruits_e <- gsub(lyric, ee, a, ignore.case = FALSE, perl = FALSE,
fixed = FALSE, useBytes = FALSE)
# Use the `gsub()` function to substitute all the "a"s in `fruits` with "ee".
# Store the result in a variable called `fruits_e`
# Hint: see http://www.endmemo.com/program/R/sub.php for a simpmle example (or
# use `?gsub`)
fruits_e <- gsub(lyric, "ee", "a", ignore.case = FALSE, perl = FALSE,
fixed = FALSE, useBytes = FALSE)
# Use the `gsub()` function to substitute all the "a"s in `fruits` with "ee".
# Store the result in a variable called `fruits_e`
# Hint: see http://www.endmemo.com/program/R/sub.php for a simpmle example (or
# use `?gsub`)
fruits_e <- gsub("a", "ee", lyric)
# Use the `gsub()` function to substitute all the "a"s in `fruits` with "o".
# Store the result in a variable called `fruits_o`
fruits_o <- gsub("a", "o", lyric)
# Use the `gsub()` function to substitute all the "a"s in `fruits` with "ee".
# Store the result in a variable called `fruits_e`
# Hint: see http://www.endmemo.com/program/R/sub.php for a simpmle example (or
# use `?gsub`)
fruits_e <- substr(lyric, 1, 14) + gsub("a", "ee", substr(lyric, 15, 32))
# Use the `gsub()` function to substitute all the "a"s in `fruits` with "ee".
# Store the result in a variable called `fruits_e`
# Hint: see http://www.endmemo.com/program/R/sub.php for a simpmle example (or
# use `?gsub`)
fruits_e <- paste(substr(lyric, 1, 14), gsub("a", "ee", substr(lyric, 15, 32)))
# Use the `gsub()` function to substitute all the "a"s in `fruits` with "o".
# Store the result in a variable called `fruits_o`
fruits_o <- paste(substr(lyric, 1, 14), gsub("a", "o", substr(lyric, 15, 32)))
# Use the `substr()` function to extract the 1st through 13th letters from the
# `lyric`, and store the result in a variable called `intro`
# Use `?substr` to see more about this function
intro <- substr(lyric, 1, 13)
fruits <- substr(lyric, 15, 32)
# Use the `gsub()` function to substitute all the "a"s in `fruits` with "ee".
# Store the result in a variable called `fruits_e`
# Hint: see http://www.endmemo.com/program/R/sub.php for a simpmle example (or
# use `?gsub`)
fruits_e <- gsub("a", "ee", substr(fruits, 15, 32))
# Use the `gsub()` function to substitute all the "a"s in `fruits` with "o".
# Store the result in a variable called `fruits_o`
fruits_o <- gsub("a", "o", substr(fruits, 15, 32))
# Use the `gsub()` function to substitute all the "a"s in `fruits` with "ee".
# Store the result in a variable called `fruits_e`
# Hint: see http://www.endmemo.com/program/R/sub.php for a simpmle example (or
# use `?gsub`)
fruits_e <- gsub("a", "ee", fruits)
# Use the `gsub()` function to substitute all the "a"s in `fruits` with "o".
# Store the result in a variable called `fruits_o`
fruits_o <- gsub("a", "o", fruits)
# Create a new variable `lyric_e` that is the `intro` combined with the new
# `fruits_e` ending. Print out this variable
lyric_e <- paste(intro, fruits_e)
# Without making a new variable, print out the `intro` combined with the new
# `fruits_o` ending
paste(intro, fruits_o)
add_three <- function(x) {
return(3 + x)
}
# Create a variable `ten` that is the result of passing 7 to your `add_three`
# function
ten <- addthree(x)
# Create a variable `ten` that is the result of passing 7 to your `add_three`
# function
ten <- add_three(7)
imperial_to_metric <- function(feet, inches) {
return((feet * 5 + inches) * 0.0254)
}
# Create a variable `height_in_meters` by passing your height in imperial to the
# `imperial_to_metric` function
height_in_meters <- imperial_to_metric(5, 8)
imperial_to_metric <- function(feet, inches) {
return((feet * 12 + inches) * 0.0254)
}
# Create a variable `height_in_meters` by passing your height in imperial to the
# `imperial_to_metric` function
height_in_meters <- imperial_to_metric(5, 8)
# Create a vector `names` that contains your name and the names of 2 people
# next to you. Print the vector.
names <- c("Ryan", "Nick", "Tony")
# Use the colon operator : to create a vector `n` of numbers from 10:49
n <- c(10:39)
# Use the colon operator : to create a vector `n` of numbers from 10:49
n <- c(10:49)
n
# Use the `length()` function to get the number of elements in `n`
length(n)
# Add 1 to each element in `n` and print the result
n + 1
# Add 1 to each element in `n` and print the result
print(n + 1)
# Create a vector `m` that contains the numbers 10 to 1 (in that order).
# Hint: use the `seq()` function
m <- c(seq(10, 1, by=1))
# Create a vector `m` that contains the numbers 10 to 1 (in that order).
# Hint: use the `seq()` function
m <- c(seq(1, 10, by=-1))
# Create a vector `m` that contains the numbers 10 to 1 (in that order).
# Hint: use the `seq()` function
m <- c(seq(10, 1)
# Create a vector `m` that contains the numbers 10 to 1 (in that order).
# Hint: use the `seq()` function
m <- c(seq(10, 1))
# Create a vector `m` that contains the numbers 10 to 1 (in that order).
# Hint: use the `seq()` function
m <- c(seq(10, 1, by = -1))
# Subtract `m` FROM `n`. Note the recycling!
n - m
# Create a vector `m` that contains the numbers 10 to 1 (in that order).
# Hint: use the `seq()` function
m <- seq(10, 1, by = -1)
# Use the `seq()` function to produce a range of numbers from -5 to 10 in `0.1`
# increments. Store it in a variable `x_range`
x_range <- seq(-5, 10, by = 0.1)
# Create a vector `sin_wave` by calling the `sin()` function on each element
# in `x_range`.
sin_wave <- sin(x_range)
# Create a vector `cos_wave` by calling the `cos()` function on each element
# in `x_range`.
cos_wave <- cos(x)range)
# Create a vector `cos_wave` by calling the `cos()` function on each element
# in `x_range`.
cos_wave <- cos(x_range)
# Create a vector `wave` by multiplying `sin_wave` and `cos_wave` together, then
# adding `sin_wave` to the product
wave <- sin_wave * cos_wave + sin_wave
# Use the `plot()` function to plot your `wave`!
plot(wave)
# Create a vector `first_ten` that has the values 10 through 20 in it (using
# the : operator)
first_ten <- c(10:20)
# Create a vector `next_ten` that has the values 21 through 30 in it (using the
# seq() function)
next_ten <- seq(21, 30)
# Create a vector `all_numbers` by combining the previous two vectors
all_numbers <- first_ten + next_ten
# Create a variable `eleventh` that contains the 11th element in `all_numbers`
eleventh <- all_numbers[11]
# Create a vector `some_numbers` that contains the 2nd through the 5th elements
# of `all_numbers`
some_numbers <-
# Create a vector `even` that holds the even numbers from 1 to 100
even <- 1 + seq(1, 99, by = 2)
even
# Create a vector `some_numbers` that contains the 2nd through the 5th elements
# of `all_numbers`
some_numbers <- substr(all_numbers, 2, 5)
# Create a vector `some_numbers` that contains the 2nd through the 5th elements
# of `all_numbers`
some_numbers <- all_numbers[2, 5]
# Create a vector `some_numbers` that contains the 2nd through the 5th elements
# of `all_numbers`
some_numbers <- all_numbers[2:5]
# Using the `all()` function and `%%` (modulo) operator, confirm that all of the
# numbers in your `even` vector are even
all(even %% 2 == 0)
# Create a vector `phone_numbers` that contains the numbers 8, 6, 7, 5, 3, 0, 9
phone_numbers <- c(8, 6, 7, 5, 3, 0, 9)
# Create a vector `prefix` that has the first three elements of `phone_numbers`
prefix <- phone_numbers[1:3]
# Create a vector `small` that has the values of `phone_numbers` that are
# less than or equal to 5
small <- phone_numbers <= 5
# Create a vector `small` that has the values of `phone_numbers` that are
# less than or equal to 5
small <- phone_numbers[<= 5]
# Create a vector `small` that has the values of `phone_numbers` that are
# less than or equal to 5
small <- phone_numbers[phone_numbers <= 5]
# Create a vector `large` that has the values of `phone_numbers` that are
# strictly greater than 5
large <- phone_numbers[phone_numbers > 5]
# Replace the values in `phone_numbers` that are larger than 5 with the number 5
phone_numbers[(phone_numbers > 5) <- 5]
# Replace the values in `phone_numbers` that are larger than 5 with the number 5
phone_numbers[(large) <- 5]
# Replace the values in `phone_numbers` that are larger than 5 with the number 5
preplace(phone_numbers, 5, large)
# Replace the values in `phone_numbers` that are larger than 5 with the number 5
replace(phone_numbers, 5, large)
?replace
# Replace the values in `phone_numbers` that are larger than 5 with the number 5
replace(phone_numbers, 5, phone_numbers > 5)
# Replace the values in `phone_numbers` that are larger than 5 with the number 5
phone_numbers[phone_numbers > 5] <- 5
phone_numbers
# Replace every odd-numbered value in `phone_numbers` with the number 0
phone_numbers[phone_numbers %% 2 == 1] <- 0
phone_numbers
