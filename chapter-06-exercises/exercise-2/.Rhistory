install.packages('rmarkdown')
install.packages('tinytex')
tinytex::install_tinytex()
3 + 7
3 + 7
2 + 2
2 + 2
data(iris)
force(iris)
View(iris)
x = 7
rm(x)
?sqrt
knitr::opts_chunk$set(echo = TRUE)
# Your code goes here!
```{r, eval = TRUE, echo = TRUE}
```{r, eval = TRUE, echo = TRUE}
c(N(3,7))
c(rnorm(3,7))
c(rnorm(7, 3))
x <- c(na, length = 100000)
x <- c(NA, length = 100000)
x <- c(NA, length = 100000)
x.mean() <- 7
x <- c(7, length = 100000)
x <- c(rnorm(7, 3), length = 100000)
x <- c(rnorm(3, 7), length = 100000)
x <- c(rnorm(3, 7), length = 100000)
head(1, 5)
x <- c(rnorm(3, 7), length = 100000)
?head()
x <- c(rnorm(3, 7), length = 100000)
head(x, 5)
x <- c(rnorm(3, 7), length = 100000)
head(x, 6)
x <- c(rnorm(3, 7), length = 100000)
head(x, 5)
x <- c(rnorm(3, 7), length = 100000)
head(x, n = 5)
x <- c(rnorm(3, 7), length = 100000)
head(x, )
x <- c(rnorm(3, 7), length = 100000)
head(x)
x <- c(rnorm(3, 7), length = 100000)
head(x, n = 6L, 5)
x <- c(rnorm(3, 7), length = 100000)
head(x, 5)
x <- c(rnorm(3, 7), length = 100000)
y <- head(x, 5)
x <- c(rnorm(3, 7), length = 100000)
y <- head(x, n = 5L)
knitr::opts_chunk$set(echo = TRUE)
x <- c(rnorm(3, 7), length = 100000)
y <- head(x, n = 5L)
x
x <- c(rnorm(3, 7), 100000)
x <- c(rnorm(3, 7), 100000)
x <- c(rnorm(3, 7), 100000)
rm(y)
x <- c(rnorm(3, 7), 100000)
rm(x)
x <- c(rnorm(3, 7), 100000)
rm(x)
x <- c(rnorm(3, 7), length = 100000)
x <- c(rnorm(3, 7), length = 10)
x <- c(rnorm(3, 7), length = 10)
rm(x)
x <- rep(c(rnorm(3, 7), 10))
x <- rep(c(rnorm(3, 7)), 10)
rm(x)
x <- rep(c(rnorm(3, 7)), 10)
x <- rep(c(rnorm(3, 7)), 100000)
x <- rep(c(rnorm(3, 7)), 100000/3)
x <- rep(c(rnorm(3, 7)), 100000/3 + 1)
x <- rep(c(rnorm(3, 7)), 100000/3 + 1)
x <- rep(c(rnorm(3, 7)), 100)
x <- rep(c(rnorm(3, 7)), 333)
x <- rep(c(rnorm(3, 7)), 333.3)
x <- rep(c(rnorm(3, 7)), 333.4)
x <- rep(c(rnorm(3, 7)), 333.5)
x <- rep(c(rnorm(3, 7)), 334)
x <- rep(c(rnorm(3, 7)), 33333)
x <- rep(c(rnorm(3, 7)), 33334)
x <- rep(c(rnorm(3, 7)), 33333.3)
x <- rep(c(rnorm(3, 7)), 33333.9)
x <- rep(c(rnorm(3, 7)), 33333)
x <- rep(c(rnorm(3, 7)), 5)
x <- rep(c(rnorm(3, 7)), 5)
x
x <- rep(c(rnorm(3, 7)), 1)
x
x <- rep(c(rnorm(3, 7)), 1)
x
x <- rep(c(rnorm(3, 7)), 1)
x
x <- rep(c(rnorm(3, 7)), 1)
x
?rnorm()
x <- rnorm(100000, mean = 7, sd = 3)
x <- rnorm(5, mean = 7, sd = 3)
x <- rnorm(5, mean = 7, sd = 3)
x
x <- rnorm(100000, mean = 7, sd = 3)
x <- rnorm(100000, mean = 7, sd = 3)
head(x, 5)
2 + 1
3 + 5
2 + 2
print("Hello world!")
1000/3
# Create a variable `hometown` that stores the city in which you were born
hometown <- "Seoul"
# Assign your name to the variable `my_name`
my_name <- "Ryan"
# Assign your height (in inches) to a variable `my_height`
my_height <- 68
# Create a variable `puppies` equal to the number of puppies you'd like to have
puppies <- 1
# Create a variable `puppy_price`, which is how much you think a puppy costs
puppy_price <- 300
# Create a variable `total_cost` that has the total cost of all of your puppies
total_cost <- 300
# Create a boolean variable `too_expensive`, set to TRUE if the cost is greater
# than $1,000
too_expensive <- (total_cost > 1000)
# Create a variable `max_puppies`, which is the number of puppies you can
# afford for $1,000
max_puppies <- 3
# Create a variable `my_name` that contains your name
my_name <- "Ryan"
# Create a variable `my_name` that contains your name
my_name <- "Ryan"
# Create a variable `name_length` that holds how many letters (including spaces)
# are in your name (use the `nchar()` function)
name_length <- nchar(my_name)
# Print the number of letters in your name
print(name_length)
# Create a variable `now_doing` that is your name followed by "is programming!"
# (use the `paste()` function)
now_doing <- paste(my_name "is programming")
# Create a variable `now_doing` that is your name followed by "is programming!"
# (use the `paste()` function)
now_doing <- paste(my_name, "is programming")
# Make the `now_doing` variable upper case
toupper(now_doing)
hours <- 35  # 35 hours were worked this week
pay_rate <- 15  # Pay rate was at Seattle minimum wage
earnings <- hours * pay_rate
calculate_earnings <- function(hours, pay_rate) {
earnings <- hours * pay_rate
return(earnings)
}
employee1_earnings <- calculate_earnings(40, 15)
employee1_earnings <- calculate_earnings(40, 15)
print(employee1_earnings)
employee1_earnings <- calculate_earnings(10, 12)
print(employee1_earnings)
employee2_earnings <- calculate_earnings(40, 22)
print(employee2_earnings)
intro <- function(year, major) {
greet <- paste("Hello I am a ", year, "year, and my major is", major)
return(greet)
}
# Call intro() function
intro(second, Ryan)
# Call intro() function
intro("second", "Ryan")
intro <- function(year, major) {
greet <- paste("Hello I am a", year, "year, and my major is", major)
return(greet)
}
# Call intro() function
intro("second", "Ryan")
days_to_deadline <- function(deadline, today) {  # create function with inputs deadline and today
days_remaining <- as.Date(deadline) - as.Date(today)  # assigns variable days_remaining with deadline date today's date that have been changed to date format
return(days_remaining)  # returns variable days_remaining
}
a2_days_left <- days_to_deadline("2020-01-23", "2020-01-14")
print(a2_days_left)
print(winter_finals_end)
print(july_fourth)
print(winter_finals_end)
winter_finals_end
days_to_deadline <- function(deadline, today) {  # create function with inputs deadline and today
days_remaining <- as.Date(deadline) - as.Date(today)  # assigns variable days_remaining with deadline date today's date that have been changed to date format
return(days_remaining)  # returns variable days_remaining
}
# 2. What will each of the following lines return?
#   Note, you may need to print the variables.
a2_days_left <- days_to_deadline("2020-01-23", "2020-01-14")
print(a2_days_left)
winter_finals_end <- days_to_deadline("2020-03-20", "2020-01-14")
print(winter_finals_end)
july_fourth <- days_to_deadline("2020-07-04", "2020-01-14")
print(july_fourth)
# =====================================
# title: "INFO 201 Lab 2 Exercises"
# author: [Ryan Kim]
# date: "January 14, 2020"
# =====================================
#
#   In groups of three, you will now work on the following exercises where you will practice:
#
#   * Creating user-defined functions
#   * Calling user-defined functions
#
#  REPLACE ALL THE '____' WITH YOUR SOLUTIONS.
#
# # Exercise 1. Ratio Calculator -------------------------------------------
#
#  1. Define function 'calculate_ratio()' that takes x and divides it by y.
#  2. Create the variable 'ratio' and assign your calculation to it.
#  3. Return ratio variable.
#  4. Call calculate_ratio() with arguments 60 and 12.
#
# Define calculate_ratio() function
calculate_ratio <- function(x, y) {
ratio <- x / y
return(ratio)
}
# Call calculate_ratio()
calculate_ratio(60, 12)
# Exercise 2. Introduction Generator ----------------------------------------
#
# 1. Define function 'intro()' that takes the following two arguments: year and major.
# 2. The function will return a character string of the format
#   "Hello I am a {YEAR} year, and my major is {MAJOR}." (replacing {YEAR} and {MAJOR} with the appropriate argument values).
# 3. Assign this character string to the variable 'greet'.
# 4. Return greet variable.
# 5. Call intro() function using your name and major as arguments.
#
#  Define intro() function
intro <- function(year, major) {
greet <- paste("Hello I am a", year, "year, and my major is", major)
return(greet)
}
# Call intro() function
intro("second", "Ryan")
# Bonus: Exercise 3. Days Counter --------------------------------------------
#
# 1. Write code comments for each line to describe what the function is doing.
#
days_to_deadline <- function(deadline, today) {  # create function with inputs deadline and today
days_remaining <- as.Date(deadline) - as.Date(today)  # assigns variable days_remaining with deadline date today's date that have been changed to date format
return(days_remaining)  # returns variable days_remaining
}
# 2. What will each of the following lines return?
#   Note, you may need to print the variables.
a2_days_left <- days_to_deadline("2020-01-23", "2020-01-14")
print(a2_days_left)
winter_finals_end <- days_to_deadline("2020-03-20", "2020-01-14")
print(winter_finals_end)
july_fourth <- days_to_deadline("2020-07-04", "2020-01-14")
print(july_fourth)
# END
# =====================================
# title: "INFO 201 Lab 2 Exercises"
# author: [Ryan Kim]
# date: "January 14, 2020"
# =====================================
#
#   In groups of three, you will now work on the following exercises where you will practice:
#
#   * Creating user-defined functions
#   * Calling user-defined functions
#
#  REPLACE ALL THE '____' WITH YOUR SOLUTIONS.
#
# # Exercise 1. Ratio Calculator -------------------------------------------
#
#  1. Define function 'calculate_ratio()' that takes x and divides it by y.
#  2. Create the variable 'ratio' and assign your calculation to it.
#  3. Return ratio variable.
#  4. Call calculate_ratio() with arguments 60 and 12.
#
# Define calculate_ratio() function
calculate_ratio <- function(x, y) {
ratio <- x / y
return(ratio)
}
# Call calculate_ratio()
calculate_ratio(60, 12)
# Exercise 2. Introduction Generator ----------------------------------------
#
# 1. Define function 'intro()' that takes the following two arguments: year and major.
# 2. The function will return a character string of the format
#   "Hello I am a {YEAR} year, and my major is {MAJOR}." (replacing {YEAR} and {MAJOR} with the appropriate argument values).
# 3. Assign this character string to the variable 'greet'.
# 4. Return greet variable.
# 5. Call intro() function using your name and major as arguments.
#
#  Define intro() function
intro <- function(year, major) {
greet <- paste("Hello I am a", year, "year, and my major is", major)
return(greet)
}
# Call intro() function
intro("second", "info")
# Bonus: Exercise 3. Days Counter --------------------------------------------
#
# 1. Write code comments for each line to describe what the function is doing.
#
days_to_deadline <- function(deadline, today) {  # create function with inputs deadline and today
days_remaining <- as.Date(deadline) - as.Date(today)  # assigns variable days_remaining with deadline date today's date that have been changed to date format
return(days_remaining)  # returns variable days_remaining
}
# 2. What will each of the following lines return?
#   Note, you may need to print the variables.
a2_days_left <- days_to_deadline("2020-01-23", "2020-01-14")
print(a2_days_left)
winter_finals_end <- days_to_deadline("2020-03-20", "2020-01-14")
print(winter_finals_end)
july_fourth <- days_to_deadline("2020-07-04", "2020-01-14")
print(july_fourth)
# END
# =====================================
# title: "INFO 201 Lab 2 Exercises"
# author: [Ryan Kim]
# date: "January 14, 2020"
# =====================================
#
#   In groups of three, you will now work on the following exercises where you will practice:
#
#   * Creating user-defined functions
#   * Calling user-defined functions
#
#  REPLACE ALL THE '____' WITH YOUR SOLUTIONS.
#
# # Exercise 1. Ratio Calculator -------------------------------------------
#
#  1. Define function 'calculate_ratio()' that takes x and divides it by y.
#  2. Create the variable 'ratio' and assign your calculation to it.
#  3. Return ratio variable.
#  4. Call calculate_ratio() with arguments 60 and 12.
#
# Define calculate_ratio() function
calculate_ratio <- function(x, y) {
ratio <- x / y
return(ratio)
}
# Call calculate_ratio()
calculate_ratio(60, 12)
# Exercise 2. Introduction Generator ----------------------------------------
#
# 1. Define function 'intro()' that takes the following two arguments: year and major.
# 2. The function will return a character string of the format
#   "Hello I am a {YEAR} year, and my major is {MAJOR}." (replacing {YEAR} and {MAJOR} with the appropriate argument values).
# 3. Assign this character string to the variable 'greet'.
# 4. Return greet variable.
# 5. Call intro() function using your name and major as arguments.
#
#  Define intro() function
intro <- function(year, major) {
greet <- paste("Hello I am a", year, "year, and my major is", major, ".")
return(greet)
}
# Call intro() function
intro("second", "info")
# Bonus: Exercise 3. Days Counter --------------------------------------------
#
# 1. Write code comments for each line to describe what the function is doing.
#
days_to_deadline <- function(deadline, today) {  # create function with inputs deadline and today
days_remaining <- as.Date(deadline) - as.Date(today)  # assigns variable days_remaining with deadline date today's date that have been changed to date format
return(days_remaining)  # returns variable days_remaining
}
# 2. What will each of the following lines return?
#   Note, you may need to print the variables.
a2_days_left <- days_to_deadline("2020-01-23", "2020-01-14")
print(a2_days_left)
winter_finals_end <- days_to_deadline("2020-03-20", "2020-01-14")
print(winter_finals_end)
july_fourth <- days_to_deadline("2020-07-04", "2020-01-14")
print(july_fourth)
# END
# =====================================
# title: "INFO 201 Lab 2 Exercises"
# author: [Ryan Kim]
# date: "January 14, 2020"
# =====================================
#
#   In groups of three, you will now work on the following exercises where you will practice:
#
#   * Creating user-defined functions
#   * Calling user-defined functions
#
#  REPLACE ALL THE '____' WITH YOUR SOLUTIONS.
#
# # Exercise 1. Ratio Calculator -------------------------------------------
#
#  1. Define function 'calculate_ratio()' that takes x and divides it by y.
#  2. Create the variable 'ratio' and assign your calculation to it.
#  3. Return ratio variable.
#  4. Call calculate_ratio() with arguments 60 and 12.
#
# Define calculate_ratio() function
calculate_ratio <- function(x, y) {
ratio <- x / y
return(ratio)
}
# Call calculate_ratio()
calculate_ratio(60, 12)
# Exercise 2. Introduction Generator ----------------------------------------
#
# 1. Define function 'intro()' that takes the following two arguments: year and major.
# 2. The function will return a character string of the format
#   "Hello I am a {YEAR} year, and my major is {MAJOR}." (replacing {YEAR} and {MAJOR} with the appropriate argument values).
# 3. Assign this character string to the variable 'greet'.
# 4. Return greet variable.
# 5. Call intro() function using your name and major as arguments.
#
#  Define intro() function
intro <- function(year, major) {
greet <- paste("Hello I am a ", year, " year, and my major is ", major, ".", sep="")
return(greet)
}
# Call intro() function
intro("second", "info")
# Bonus: Exercise 3. Days Counter --------------------------------------------
#
# 1. Write code comments for each line to describe what the function is doing.
#
days_to_deadline <- function(deadline, today) {  # create function with inputs deadline and today
days_remaining <- as.Date(deadline) - as.Date(today)  # assigns variable days_remaining with deadline date today's date that have been changed to date format
return(days_remaining)  # returns variable days_remaining
}
# 2. What will each of the following lines return?
#   Note, you may need to print the variables.
a2_days_left <- days_to_deadline("2020-01-23", "2020-01-14")
print(a2_days_left)
winter_finals_end <- days_to_deadline("2020-03-20", "2020-01-14")
print(winter_finals_end)
july_fourth <- days_to_deadline("2020-07-04", "2020-01-14")
print(july_fourth)
# END
